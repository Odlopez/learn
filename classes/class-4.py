# Одно из применений множественного наследование – расширение функциональности 
# класса каким-то заранее определенным способом. 
# Например, если нам понадобится логировать какую-то информацию при обращении к методам класса.

# Рассмотрим класс Loggable:

# import time

# class Loggable:
#     def log(self, msg):
#         print(str(time.ctime()) + ": " + str(msg))

# У него есть ровно один метод log, который позволяет выводить в лог (в данном случае в stdout) 
# какое-то сообщение, добавляя при этом текущее время.
# Реализуйте класс LoggableList, отнаследовав его от классов list и Loggable таким образом, 
# чтобы при добавлении элемента в список посредством метода append в лог отправлялось сообщение, 
# состоящее из только что добавленного элемента.

# импортируем модуль времени
import time

# создаем класс, с методом log,
# который выводит на печать время, а также сообщение 
class Loggable:
  def log(self, msg):
    print(str(time.ctime()) + ": " + str(msg))

# создаем класс, унаследованный от класса list
# и Loggable
class LoggableList(list, Loggable):
  def append(self, x):
    # вызываем функцию append, которая стандартная для всех списов
    super().append(x)
    # вызываем функцию создания логов унаследованную от класса выше
    super().log(x)